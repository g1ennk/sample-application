name: Backend CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      APPLICATION_NAME: ${{ secrets.CODEDEPLOY_APP }}
      DEPLOYMENT_GROUP: ${{ secrets.CODEDEPLOY_GROUP }}
      JAR_NAME: backend-0.0.1-SNAPSHOT.jar

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Gradle
        run: |
          cd backend
          chmod +x gradlew
          ./gradlew clean build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Generate Image Tag
        id: vars
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        run: |
          cd backend
          ECR_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t $ECR_URI:${{ steps.vars.outputs.IMAGE_TAG }} \
            -t $ECR_URI:latest \
            --push .

      - name: Create Deployment Package
        run: |
          cd ..
          mkdir -p deploy
          echo "${{ steps.vars.outputs.IMAGE_TAG }}" > deploy/image_tag.txt
          cp appspec.yml deploy/
          cp scripts/* deploy/
          cd deploy && zip -r ../deploy.zip . && cd ..

      - name: Upload to S3
        run: |
          aws s3 cp deploy.zip s3://$S3_BUCKET/deploy.zip

      - name: Deploy with AWS CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name $APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP \
            --revision "revisionType=S3,s3Location={bucket=$S3_BUCKET,key=deploy.zip,bundleType=zip}" \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --region $AWS_REGION \
            --ignore-application-stop-failures
