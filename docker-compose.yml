version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql_service
    restart: always  # 컨테이너 종료 시 자동 재시작
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # .env 파일에서 로드 for 보안
      MYSQL_DATABASE: mytempdb  # 기본적으로 생성할 데이터베이스 지정
    ports:
      - "3306:3306"  # MySQL의 기본 포트 3306 개방
    volumes:
      - mysql_data:/var/lib/mysql  # 데이터베이스 데이터 유지
    healthcheck:
      test: [ "CMD", "mysql", "-uroot", "-p${MYSQL_ROOT_PASSWORD}", "-e", "SELECT 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app_network

  backend:
    build: ./backend  # 백엔드 디렉토리에서 Dockerfile을 기반으로 빌드
    container_name: backend_service  # 컨테이너 이름 설정
    restart: always  # 컨테이너 종료 시 자동 재시작
    depends_on:
      mysql:
        condition: service_healthy  # MySQL이 정상적으로 실행된 후 백엔드 실행
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/mytempdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "8080:8080"
    networks:
      - app_network

  frontend:
    build: ./frontend
    container_name: frontend_service
    restart: always
    depends_on:
      - backend  # 백엔드가 실행된 후 프론트엔드 실행
    ports:
      - "3000:3000"  # React 개발 서버 3000번 포트 개방
    volumes:
      - ./frontend:/app  # 로컬 파일과 동기화하여 변경 사항 반영 가능
    working_dir: /app  # 컨테이너 내에서 작업 디렉토리 설정
    command: [ "npm", "start" ]  # React 개발 서버 실행
    environment:
      - CHOKIDAR_USE POLLING=true  # 파일 변경 감지를 위한 설정 (Docker 환경에서 필수)
    networks:
      - app_network  # 백엔드와 동일한 네트워크 사용

networks:
  app_network:
    driver: bridge  # 서비스 간 통신을 위한 브리지 네트워크 사용
